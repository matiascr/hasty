defmodule SpecTest do
  use ExUnit.Case

  alias Hasty.Spec

  @example_client_initial_packet <<0xC0, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                   0x05, 0x63, 0x5F, 0x63, 0x69, 0x64, 0x00, 0x41, 0x03, 0x00, 0x1C, 0x36, 0xA7, 0xED,
                                   0x78, 0x71, 0x6B, 0xE9, 0x71, 0x1B, 0xA4, 0x98, 0xB7, 0xED, 0x86, 0x84, 0x43, 0xBB,
                                   0x2E, 0x0C, 0x51, 0x4D, 0x4D, 0x84, 0x8E, 0xAD, 0xCC, 0x7A, 0x00, 0xD2, 0x5C, 0xE9,
                                   0xF9, 0xAF, 0xA4, 0x83, 0x97, 0x80, 0x88, 0xDE, 0x83, 0x6B, 0xE6, 0x8C, 0x0B, 0x32,
                                   0xA2, 0x45, 0x95, 0xD7, 0x81, 0x3E, 0xA5, 0x41, 0x4A, 0x91, 0x99, 0x32, 0x9A, 0x6D,
                                   0x9F, 0x7F, 0x76, 0x0D, 0xD8, 0xBB, 0x24, 0x9B, 0xF3, 0xF5, 0x3D, 0x9A, 0x77, 0xFB,
                                   0xB7, 0xB3, 0x95, 0xB8, 0xD6, 0x6D, 0x78, 0x79, 0xA5, 0x1F, 0xE5, 0x9E, 0xF9, 0x60,
                                   0x1F, 0x79, 0x99, 0x8E, 0xB3, 0x56, 0x8E, 0x1F, 0xDC, 0x78, 0x9F, 0x64, 0x0A, 0xCA,
                                   0xB3, 0x85, 0x8A, 0x82, 0xEF, 0x29, 0x30, 0xFA, 0x5C, 0xE1, 0x4B, 0x5B, 0x9E, 0xA0,
                                   0xBD, 0xB2, 0x9F, 0x45, 0x72, 0xDA, 0x85, 0xAA, 0x3D, 0xEF, 0x39, 0xB7, 0xEF, 0xAF,
                                   0xFF, 0xA0, 0x74, 0xB9, 0x26, 0x70, 0x70, 0xD5, 0x0B, 0x5D, 0x07, 0x84, 0x2E, 0x49,
                                   0xBB, 0xA3, 0xBC, 0x78, 0x7F, 0xF2, 0x95, 0xD6, 0xAE, 0x3B, 0x51, 0x43, 0x05, 0xF1,
                                   0x02, 0xAF, 0xE5, 0xA0, 0x47, 0xB3, 0xFB, 0x4C, 0x99, 0xEB, 0x92, 0xA2, 0x74, 0xD2,
                                   0x44, 0xD6, 0x04, 0x92, 0xC0, 0xE2, 0xE6, 0xE2, 0x12, 0xCE, 0xF0, 0xF9, 0xE3, 0xF6,
                                   0x2E, 0xFD, 0x09, 0x55, 0xE7, 0x1C, 0x76, 0x8A, 0xA6, 0xBB, 0x3C, 0xD8, 0x0B, 0xBB,
                                   0x37, 0x55, 0xC8, 0xB7, 0xEB, 0xEE, 0x32, 0x71, 0x2F, 0x40, 0xF2, 0x24, 0x51, 0x19,
                                   0x48, 0x70, 0x21, 0xB4, 0xB8, 0x4E, 0x15, 0x65, 0xE3, 0xCA, 0x31, 0x96, 0x7A, 0xC8,
                                   0x60, 0x4D, 0x40, 0x32, 0x17, 0x0D, 0xEC, 0x28, 0x0A, 0xEE, 0xFA, 0x09, 0x5D, 0x08,
                                   0xB3, 0xB7, 0x24, 0x1E, 0xF6, 0x64, 0x6A, 0x6C, 0x86, 0xE5, 0xC6, 0x2C, 0xE0, 0x8B,
                                   0xE0, 0x99>>

  @example_server_initial_packet <<0xC0, 0x00, 0x00, 0x00, 0x01, 0x05, 0x63, 0x5F, 0x63, 0x69, 0x64, 0x05, 0x73, 0x5F,
                                   0x63, 0x69, 0x64, 0x00, 0x40, 0x75, 0x00, 0x83, 0x68, 0x55, 0xD5, 0xD9, 0xC8, 0x23,
                                   0xD0, 0x7C, 0x61, 0x68, 0x82, 0xCA, 0x77, 0x02, 0x79, 0x24, 0x98, 0x64, 0xB5, 0x56,
                                   0xE5, 0x16, 0x32, 0x25, 0x7E, 0x2D, 0x8A, 0xB1, 0xFD, 0x0D, 0xC0, 0x4B, 0x18, 0xB9,
                                   0x20, 0x3F, 0xB9, 0x19, 0xD8, 0xEF, 0x5A, 0x33, 0xF3, 0x78, 0xA6, 0x27, 0xDB, 0x67,
                                   0x4D, 0x3C, 0x7F, 0xCE, 0x6C, 0xA5, 0xBB, 0x3E, 0x8C, 0xF9, 0x01, 0x09, 0xCB, 0xB9,
                                   0x55, 0x66, 0x5F, 0xC1, 0xA4, 0xB9, 0x3D, 0x05, 0xF6, 0xEB, 0x83, 0x25, 0x2F, 0x66,
                                   0x31, 0xBC, 0xAD, 0xC7, 0x40, 0x2C, 0x10, 0xF6, 0x5C, 0x52, 0xED, 0x15, 0xB4, 0x42,
                                   0x9C, 0x9F, 0x64, 0xD8, 0x4D, 0x64, 0xFA, 0x40, 0x6C, 0xF0, 0xB5, 0x17, 0xA9, 0x26,
                                   0xD6, 0x2A, 0x54, 0xA9, 0x29, 0x41, 0x36, 0xB1, 0x43, 0xB0, 0x33>>

  describe "is long header packet" do
    test "client initial packet" do
      assert Spec.is_long_header_packet?(@example_client_initial_packet)
    end

    test "is not initial packet" do
      # We change the long header packet type bits
      <<1::1, 1::1, _long_header_packet_type::size(2), rest::bitstring>> = @example_client_initial_packet

      packet_with_modified_type = <<1::1, 1::1, 1::2, rest::bitstring>>

      assert Spec.is_long_header_packet?(packet_with_modified_type)
      refute Spec.is_initial_packet?(packet_with_modified_type)
    end

    test "server initial packet" do
      assert Spec.is_long_header_packet?(@example_server_initial_packet)
    end
  end

  describe "is initial packet" do
    test "client initial packet" do
      assert Spec.is_initial_packet?(@example_client_initial_packet)
    end

    test "server initial packet" do
      assert Spec.is_initial_packet?(@example_server_initial_packet)
    end
  end

  describe "parse initial packet" do
    test "client initial packet" do
      assert {packet, ""} = Spec.parse_initial_packet(@example_client_initial_packet)

      expected_payload =
        :binary.decode_unsigned(
          <<0x1C, 0x36, 0xA7, 0xED, 0x78, 0x71, 0x6B, 0xE9, 0x71, 0x1B, 0xA4, 0x98, 0xB7, 0xED, 0x86, 0x84, 0x43, 0xBB,
            0x2E, 0x0C, 0x51, 0x4D, 0x4D, 0x84, 0x8E, 0xAD, 0xCC, 0x7A, 0x00, 0xD2, 0x5C, 0xE9, 0xF9, 0xAF, 0xA4, 0x83,
            0x97, 0x80, 0x88, 0xDE, 0x83, 0x6B, 0xE6, 0x8C, 0x0B, 0x32, 0xA2, 0x45, 0x95, 0xD7, 0x81, 0x3E, 0xA5, 0x41,
            0x4A, 0x91, 0x99, 0x32, 0x9A, 0x6D, 0x9F, 0x7F, 0x76, 0x0D, 0xD8, 0xBB, 0x24, 0x9B, 0xF3, 0xF5, 0x3D, 0x9A,
            0x77, 0xFB, 0xB7, 0xB3, 0x95, 0xB8, 0xD6, 0x6D, 0x78, 0x79, 0xA5, 0x1F, 0xE5, 0x9E, 0xF9, 0x60, 0x1F, 0x79,
            0x99, 0x8E, 0xB3, 0x56, 0x8E, 0x1F, 0xDC, 0x78, 0x9F, 0x64, 0x0A, 0xCA, 0xB3, 0x85, 0x8A, 0x82, 0xEF, 0x29,
            0x30, 0xFA, 0x5C, 0xE1, 0x4B, 0x5B, 0x9E, 0xA0, 0xBD, 0xB2, 0x9F, 0x45, 0x72, 0xDA, 0x85, 0xAA, 0x3D, 0xEF,
            0x39, 0xB7, 0xEF, 0xAF, 0xFF, 0xA0, 0x74, 0xB9, 0x26, 0x70, 0x70, 0xD5, 0x0B, 0x5D, 0x07, 0x84, 0x2E, 0x49,
            0xBB, 0xA3, 0xBC, 0x78, 0x7F, 0xF2, 0x95, 0xD6, 0xAE, 0x3B, 0x51, 0x43, 0x05, 0xF1, 0x02, 0xAF, 0xE5, 0xA0,
            0x47, 0xB3, 0xFB, 0x4C, 0x99, 0xEB, 0x92, 0xA2, 0x74, 0xD2, 0x44, 0xD6, 0x04, 0x92, 0xC0, 0xE2, 0xE6, 0xE2,
            0x12, 0xCE, 0xF0, 0xF9, 0xE3, 0xF6, 0x2E, 0xFD, 0x09, 0x55, 0xE7, 0x1C, 0x76, 0x8A, 0xA6, 0xBB, 0x3C, 0xD8,
            0x0B, 0xBB, 0x37, 0x55, 0xC8, 0xB7, 0xEB, 0xEE, 0x32, 0x71, 0x2F, 0x40, 0xF2, 0x24, 0x51, 0x19, 0x48, 0x70,
            0x21, 0xB4, 0xB8, 0x4E, 0x15, 0x65, 0xE3, 0xCA, 0x31, 0x96, 0x7A, 0xC8, 0x60, 0x4D, 0x40, 0x32, 0x17, 0x0D,
            0xEC, 0x28, 0x0A, 0xEE, 0xFA, 0x09, 0x5D, 0x08, 0xB3, 0xB7, 0x24, 0x1E, 0xF6, 0x64, 0x6A, 0x6C, 0x86, 0xE5,
            0xC6, 0x2C, 0xE0, 0x8B, 0xE0, 0x99>>
        )

      assert packet == %{
               header_form: 1,
               fixed_bit: 1,
               long_packet_type: 0b00,
               reserved_bits: 0b00,
               packet_number_length: 0b00,
               version: 0x1,
               destination_connection_id_length: 0x08,
               destination_connection_id: 0x0001020304050607,
               source_connection_id_length: 0x05,
               source_connection_id: 0x635F636964,
               token_length: 0x00,
               token: 0x00,
               length: 0x103,
               packet_number: 0x00,
               packet_payload: expected_payload
             }
    end
  end
end
